<?php

/**
 * @file
 * sparql_endpoint.module
 *
 * $endpoint = sparql_endpoint_get_endpoint('DBpedia-JSON');
 * $statement = 'select distinct ?class where {[] a ?class} LIMIT 5';
 * $data = sparql_endpoint_execute_statement($endpoint, $statement);
 */

/**
 * Implements hook_flush_caches().
 */
function sparql_endpoint_flush_caches() {
  // Update the SPARQL endpoint configurations.
  sparql_endpoint_configurations();
}

function sparql_endpoint_configurations() {
  $config = [
    'DBpedia' => [
      'class' => '\Drupal\sparql_endpoint\SparqlEndpoint',
      'endpoint_url' => 'http://dbpedia.org/sparql',
    ],
    'DBpedia-JSON' => [
      'class' => '\Drupal\sparql_endpoint\SparqlEndpoint',
      'endpoint_url' => 'http://dbpedia.org/sparql',
      'response_parser' => '\Drupal\sparql_endpoint\parsers\SparqlEndpointResponseSparqlJsonParser',
      'options' => [
        'query_string' => [
          'default-graph-uri' => 'http://dbpedia.org',
          'format' => 'application/sparql-results+json',
          'timeout' => '30000',
        ],
      ],
    ],
  ];

  // Allow other modules to define their own SPARQL Endpoints.
  drupal_alter('sparql_endpoint_configurations', $config);

  // Store the configurations.
  $cache = cache_set('sparql_endpoint_configurations', $config, 'cache', CACHE_PERMANENT);

  return $config;
}

/**
 * Get a SparqlEndpoint.
 *
 * This function maintains static instances of the endpoints. To keep track of
 * multiple endpoints, use the optional $name parameter.
 *
 * @param string $config_name
 *   A unique name for this configuration
 *
 * @return mixed
 *   Either a SparqlEndpoint or FALSE
 */
function sparql_endpoint_get_endpoint($config_name) {
  $endpoints = &drupal_static(__FUNCTION__);
  if (!isset($endpoints[$config_name])) {
    // Get the SparqlEndpoint configurations to build the SparqlEndpoint.
    $cache = cache_get('sparql_endpoint_configurations', 'cache');

    // If not cached, get the config.
    if (!$cache) {
      $config = sparql_endpoint_configurations();
    }
    else {
      $config = $cache->data;
    }

    // Load the requested SparqlEndpoint if it doesn't already exist.
    if ($config[$config_name]) {
      $class = isset($config[$config_name]['class']) ? $config[$config_name]['class'] : '\Drupal\sparql_endpoint\SparqlEndpoint';
      $endpoints[$config_name] = $class::getInstance($config[$config_name]);
    }
  }

  return isset($endpoints[$config_name]) ? $endpoints[$config_name] : FALSE;
}

/**
 * Query the public SPARQL endpoint for this OSPREY site and return the results as JSON
 *
 * @param SparqlEndpoint $endpoint
 *   A SparqlEndpoint
 *
 * @param string $statement
 *    A SPARQL statement to run
 *
 * @param array $options
 *    Request-specific options
 *
 * @return mixed
 *   The results of the executed statement
 */
function sparql_endpoint_execute_statement(\Drupal\sparql_endpoint\SparqlEndpointInterface $endpoint, $statement, array $options = array()) {

  drupal_alter('sparql_endpoint_pre_execute', $endpoint, $statement, $options);
  $result = NULL;
  try {
    $result = $endpoint->executeStatement($statement, $options);
  }
  catch (\Exception $exc) {
    module_invoke_all('sparql_endpoint_statement_exception', $exc, $endpoint, $statement, $options);
  }

  drupal_alter('sparql_endpoint_post_execute', $result, $endpoint, $statement, $options);

  return $result;
}

